# 라그랑주는 모든 자연수는 넷 혹은 그 이하의 제곱수의 합으로 표현할 수 있다고 증명하였다.
# 어떤 자연수는 복수의 방법으로 표현된다.
# 예를 들면, 26은 5^2과 1^2의 합이다; 또한 4^2 + 3^2 + 1^2으로 표현할 수도 있다.
# 1900년대 초반에 한 암산가가 15663 = 125^2 + 6^2 + 1^2 + 1^2라는 해를 구하는데
# 8초가 걸렸다는 보고가 있다. 좀 더 어려운 문제에 대해서는 56초가 걸렸다:
# 11339 = 105^2 + 15^2 + 8^2 + 5^2.
# 자연수 n이 주어질 때, n을 최소 개수의 제곱수 합으로 표현하는 컴퓨터 프로그램을 작성하시오.
import math

n = int(input())

d = [5] * (n + 1)  # n까지의 자연수에 최소 개수를 담는다.
d[1] = 1
# d2 = 1^2 + 1^2 = d1 + d1
# d3 = 1^2 + 1^2 + 1^2 = d2 + d1
# d4 = 2^2
# d5 = 2^2 + 1^2 = d4 + d1
# d6 = 2^2 + 1^2 + 1^2 = d5 + d1
# d7 = 2^2 + 1^2 + 1^2 + 1^2 = d6 + d1
# d8 = 2^2 + 2^2 = d4 + d4
# d9 = 3^2
# d10 = 3^2 + 1^2 = d9 + d1
# d11 = 3^2 + 1^2 + 1^2 = d10 + d1
# d12 = 3^2 + 1^2 + 1^2 + 1^2 = d11 + d1
# d13 = 3^2 + 2^2 = d9+ d4
# d14 = 3^2 + 2^2 + 1^2 = d13 + d1
# d15 = d14 + d1
# d16 = 4^2

# p[i] = p[i- j*j] + p[j*j]
for i in range(2, n + 1):
    if math.sqrt(i).is_integer():
        d[i] = 1
    for j in range(1, int(math.sqrt(i)) + 1):
        d[i] = min(d[i], d[i - j**2] + d[j**2])

print(d[n])